#!/usr/bin/python

import os
import sys
import getopt
import logging
import subprocess

shortHelpMsg = {}    #for main commands
shortHelpMsgSL = {}  #for sl-xxx subcommands
shortHelpMsgPH = {}  #for ph-xxx subcommands
logging.basicConfig(level=logging.INFO)

# dispatch to subcommand

def doMain():
   logging.info('ProPPR v2')
   opts = {'dryRun':False, 'out':getOutputDirectory()}
   com = getArg(0)
   while True:
      #parse special options -n, -Cfoo
      if com == "-n":
         opts['dryRun'] = True
         sys.argv = sys.argv[1:]
         com = getArg(0)
      elif com.startswith("-C"):
         opts['out']=com[2:]
         if not opts['out'].endswith("/"): opts['out'] += "/"
         sys.argv = sys.argv[1:]
         com = getArg(0)
      else: break
   if com == "help":
      doHelp(opts)
   elif com == "set":
      doSet(opts)
   elif com == "settings":
      doSettings(opts)
   elif com == "compile":
      doCompile(opts)
   elif com == "answer":
      doAnswer(opts)
   elif com == "ground":
      doGround(opts)
   elif com == "show":
      doShow(opts)
   elif com == "eval":
      doEval(opts)
   elif com == "train":
      doTrain(opts)
   elif com == "gradient":
      doGradient(opts)
   elif com.startswith("sl-"):
      doSLSubcommand(opts,com[len("sl-"):])
   elif com.startswith("ph-"):
      doPHSubcommand(opts,com[len("ph-"):])
   else:
      logging.warn("illegal command - use 'proppr help' for help")
      
# subcommands

def doSet(o):
   opts = loadOptionDict(o)  #also load command-line options
   saveOptionDict(opts,o)
shortHelpMsg['set'] = ' OPTION VALUE: store a default setting in proppr.settings, where OPTION starts with --'

def doSettings(o):
   for key,val in loadOptionDict(o).items():
      print key,val
shortHelpMsg['settings'] = ': show current default settings in proppr.settings'

def doAnswer(o):
   stem,examples = stemExt(getArg(1),'.examples')
   solutions = makeOutput(getArg(2,stem+'.solutions.txt'),o)
   #TODO this is ugly
   v = getArgvOptions()
   for i in range(len(v)):
      if v[i] == '--params':
         setArgvOption(i+1,getFile(v[i+1],o))
         break
   invokeMain(o,'QueryAnswerer','--queries',examples,'--solutions',solutions)
   logging.info('answers in '+solutions)
shortHelpMsg['answer'] = ' INPUT.examples [OUTPUT.solutions.txt]: answer queries from file and write solutions'

def doGround(o):
   stem,examples = stemExt(getArg(1),'.examples')
   grounded = makeOutput(getArg(2,stem+'.grounded'),o)
   invokeMain(o,'Grounder','--queries',examples,'--grounded',grounded)
   logging.info('grounded to '+grounded)
shortHelpMsg['ground'] = ' INPUT.examples [OUTPUT.grounded]: answer queries from file and write graphs'

def doShow(o):
   stem,grounded = stemExt(getArg(1),'.grounded')
   eid = getArg(2,'1')
   v = getArgvOptions()
   if '--maxDepth' in v: v=[]
   else: v = ['--maxDepth','-1']
   invokeHelper(o,'show.py',['--maxDepth'],grounded,eid,*v)
shortHelpMsg['show'] = ' INPUT.grounded [example#] [--maxDepth d]: display an ASCII representation of a grounded example'

def doEval(o):
   stem,examples = stemExt(getArg(1),'.examples')
   solutions = getFile(getArg(2, stem+'.solutions.txt'),o)
   opts = getArgvOptions() or ['--metric','map']
   root = getRoot()
   callProcess(o,['python',root+'/scripts/answermetrics.py','--data',examples,'--answers',solutions] + opts)
shortHelpMsg['eval'] = ' INPUT.examples INPUT.solutions.txt [--metric mrr|recall|ap] [--echo]: evaluate proposed solutions' 

def doCompile(o):
   stem,src = stemExt(getArg(1),'.ppr')
   src = getFile(src,o)
   dst = makeOutput(getArg(2,stem+".wam"),o)
   root = getRoot()
   callProcess(o,['python',root+'/src/scripts/compiler.py','serialize',src],stdout=open(dst,'w'))
   logging.info('compiled '+ src + ' to ' + dst)
shortHelpMsg['compile'] = ' INPUT.ppr [OUTPUT.wam]: compile a ProPPR program to abstract machine'

def doTrain(o):
   stem,src = stemExt(getArg(1),'.grounded')
   src = getFile(src,o)
   dst = makeOutput(getArg(2,stem+'.params'),o)
   invokeMain(o,'Trainer','--train',src,'--params',dst)
shortHelpMsg['train'] = ' INPUT.examples.grounded [OUTPUT.params]: learn parameters for the prover'

def doGradient(o):
   stem,src = stemExt(getArg(1),'.grounded')
   src = getFile(src,o)
   dst = makeOutput(getArg(2,stem+'.gradient'),o)
   invokeMain(o,'GradientFinder','--grounded',src,'--gradient',dst)
   logging.info('gradient in '+dst)
shortHelpMsg['gradient'] = ' INPUT.examples.grounded [OUTPUT.gradient]: measure gradient with respect to parameters'

def doSLSubcommand(o,subcommand):
   opts = loadOptionDict(o)
   opts['--ternaryIndex'] = 'true'
   if subcommand in ['lift','lower']:
      stem,src = stemExt(getArg(1),'.cfacts')
      src = getFile(src,o)
      dst = makeOutput(getArg(2),o)
      #no default stem+extension here so we need to add .cfacts extension if it's missing
      if not dst.endswith(".cfacts"): dst = dst+".cfacts"
      invokeHelper(o,'structured-gradient.py',[],'--com',subcommand,'--src',src,'--dst',dst)
   elif subcommand=="rel2ex":
      stem,src = stemExt(getArg(1),'.cfacts')
      src = getFile(src,o)
      dst = makeOutput(getArg(2,stem+'.examples'),o)
      if not dst.endswith(".examples"): dst = dst+".examples"
      invokeHelper(o,'structured-gradient.py',['--defaultNeg','--sample','--allowHopelessQueries'],'--com',subcommand,'--src',src,'--dst',dst)
   elif subcommand=="grad2ppr":
      stem,src = stemExt(getArg(1),'.cfacts')
      src = getFile(src,o)
      dst = makeOutput(getArg(2,stem+'.ppr'),o)
      invokeHelper(o,'structured-gradient.py',[],'--com',subcommand,'--src',src,'--dst',dst)
   elif subcommand=="tune":
      exampleStem,exampleFile = stemExt(getArg(1),'.examples')
      exampleFile = getFile(exampleFile,o)
      backgroundStem,backgroundFile = stemExt(getArg(2),'.cfacts')
      backgroundFile = getFile(backgroundFile,o)
      learnedRuleStem,learnedRuleFile = stemExt(getFile(getArg(3),o),'.ppr')
      #learnedRuleFile = getFile(learnedRuleFile,o)
      invokeMyself(o,'compile',learnedRuleFile)
      invokeMyself(o,'ground',exampleFile,exampleFile+".grounded",'--programFiles',learnedRuleStem+'.wam:'+backgroundFile,'--ternaryIndex','true')
      paramFile = makeOutput(getArg(4,exampleStem+'.params'),o)
      invokeMyself(o,'train',exampleFile+".grounded",paramFile)
   elif subcommand=="answer":
      exampleStem,exampleFile = stemExt(getArg(1),'.examples')
      exampleFile = getFile(exampleFile,o)
      backgroundStem,backgroundFile = stemExt(getArg(2),'.cfacts')
      backgroundFile = getFile(backgroundFile,o)
      learnedRuleStem,learnedRuleFile = stemExt(getFile(getArg(3),o),'.ppr')
      solutionsFile = makeOutput(getArg(4,exampleStem+'.solutions.txt'),o)
      invokeMyself(o,'compile',learnedRuleFile)
      invokeMyself(o,'answer',exampleFile,solutionsFile,'--programFiles',learnedRuleStem+'.wam:'+backgroundFile,'--ternaryIndex','true')
   elif subcommand=="train1":
      #work out input file names
      exampleStem,exampleFile = stemExt(getArg(1),'.examples')
      exampleFile = getFile(exampleFile,o)
      backgroundStem,backgroundFile = stemExt(getArg(2),'.cfacts')
      backgroundFile = resolveList(backgroundFile,o) #getFile(backgroundFile,o)
      #output and tmp files
      learnedRuleFile = makeOutput(getArg(3,exampleStem+'-learned1.ppr'),o)
      invokeHelper(o,'structured-gradient.py',[],
                   '--com','sg-train',
                   '--src',exampleFile,'--dst',learnedRuleFile,
                   '--src2',backgroundFile,'--stem',exampleStem)
      logging.info('Created rule file ' + learnedRuleFile)
   elif subcommand=="train":
      #work out input/output file names
      exampleStem,exampleFile = stemExt(getArg(1),'.examples')
      exampleFile = getFile(exampleFile,o)
      backgroundStem,backgroundFile = stemExt(getArg(2),'.cfacts')
      backgroundFile = resolveList(backgroundFile,o) #getFile(backgroundFile,o)
      learnedRuleFile = makeOutput(getArg(3,exampleStem+'-learned.ppr'),o)
      #optional arguments
      invokeHelper(o,'structured-gradient.py',['--numIters'],
                   '--com','isg-train',
                   '--src',exampleFile,'--dst',learnedRuleFile,
                   '--src2',backgroundFile,'--stem',exampleStem)
      logging.info('Created rule file ' + learnedRuleFile)
   elif subcommand=="help":
      print 'ProPPR v2: The structured gradient subcommands are:'
      for com in sorted(shortHelpMsgSL.keys()):
         print '  proppr ' + com + shortHelpMsgSL[com]
   else:
      logging.warn("illegal command - use 'proppr sl-help' for help")

def resolveList(filestr,o):
   files = filestr.split(":")
   for i in range(len(files)):
      files[i] = getFile(files[i],o)
   return ":".join(files)

shortHelpMsg['sl-help'] = ' help on the structure learning subcommands, which are of the form sl-xxx'

shortHelpMsgSL['sl-lift'] = ' INPUT.cfacts OUTPUT.cfacts: convert arity-two facts to the 2nd-order format used for structural gradient'
shortHelpMsgSL['sl-lower'] = ' INPUT.cfacts OUTPUT.cfacts: convert from the 2nd-order format used for structural gradient to ordinary facts'
shortHelpMsgSL['sl-rel2ex'] = ' INPUT.cfacts [OUTPUT.examples]: convert from the 2nd-order format for facts to a set of training/test examples'
shortHelpMsgSL['sl-grad2ppr'] = ' INPUT.gradient [OUTPUT.ppr]: convert features from gradient into rules'
shortHelpMsgSL['sl-train1'] = """ INPUT1.examples INPUT2.cfacts [OUTPUT.ppr]: given 2nd-order examples and background facts, learn a rules file.
         Also creates an intermediate file INPUT1.gradient. This is the (non-iterated) structural gradient algorithm."""
shortHelpMsgSL['sl-train'] = """ INPUT1.examples INPUT2.cfacts [OUTPUT.ppr] --numIters n: given 2nd-order examples and background facts, learn a rules file.
         Also creates a number of intermediate files for each iteration. This is the iterated structural gradient algorithm."""
shortHelpMsgSL['sl-tune'] = ' INPUT1.examples INPUT2.cfacts INPUT3.ppr [OUTPUT.params]: do parameter-tuning on a ruleset learned by sl-train or sl-train1'
shortHelpMsgSL['sl-answer'] = """ INPUT1.examples INPUT2.cfacts INPUT3.ppr [OUTPUT.solutions.txt]: given 2nd-order examples and background facts, test a learned rules file.
         One expected training/test sequence is: 
          $ proppr sl-train1 train.examples train.cfacts
          $ proppr sl-answer train.examples train.cfacts train-learned1.ppr
          $ proppr eval train
         where train.examples, train.cfacts are 2nd-order examples and facts"""

def getArgByName(name,dflt):
   if name in sys.argv:
      i = sys.argv.index(name)+1
      if i<len(sys.argv): return sys.argv[i]
      else: assert "Expected arg value after '%s'" % name
   return dflt

def doPHSubcommand(o,subcommand):
    opts = loadOptionDict(o)
    if subcommand =="db":
        factsStem,factsFile = stemExt(getArg(1),'.cfacts')
        factsFile = getFile(factsFile,o)
        dbFile = makeOutput(getArg(2,factsStem+".pkl"),o)
        invokeHelper(o,'cfacts2theano.py',[],factsFile,dbFile,*sys.argv[4:])
        logging.info("Converted DB saved in "+dbFile)
    elif subcommand=="train":
      #work out input/output file names
      exampleStem,exampleFile = stemExt(getArg(1),'.examples')
      exampleFile = getFile(exampleFile,o)
      dbStem,dbFile = stemExt(getArg(2),'.pkl')
      dbFile = getFile(dbFile,o)
      learnedModelFile = makeOutput(getArg(3),o)
      learnedParamsFile = makeOutput(getArg(4,exampleStem+'.params'),o)
      #optional arguments
      numIters = getArgByName("--numIters","5")
      model = getArgByName("--model",'LogisticRegression')
      invokeHelper(o,'pronghorn-wrapper.py',['--numIters','--model'],
                   '--src',exampleFile,'--src2',dbFile,
                   '--dst',learnedModelFile,'--dst2',learnedParamsFile,
                   '--stem',exampleStem,
                   '--numIters', str(numIters),
                   '--model',str(model))
      logging.info('Created model file ' + learnedModelFile)
      logging.info('Created params file ' + learnedParamsFile)
    elif subcommand=="answer":
      #work out input/output file names
      exampleStem,exampleFile = stemExt(getArg(1),'.examples')
      exampleFile = getFile(exampleFile,o)
      dbStem,dbFile = stemExt(getArg(2),'.pkl')
      dbFile = getFile(dbFile,o)
      modelStem,modelFile = stemExt(getArg(3),'.pkl')
      modelFile = getFile(modelFile,o)
      paramsStem,paramsFile = stemExt(getArg(4),'.params')
      paramsFile = getFile(paramsFile,o)
      solutionsFile = makeOutput(getArg(5,exampleStem+".solutions.txt"),o)
      #step 1: get the features used
      groundStem,groundFile = stemExt(makeOutput(exampleStem,o),".grounded")
      invokeMyself(o,"ground",exampleFile,groundFile)
      #step 2: obtain scores
      featureFile = groundFile + ".features"
      scoreFile = "%s.%s.params" % (paramsStem,exampleStem)
      invokeHelper(o,'pronghorn.py',[],
        "query",featureFile,paramsFile,dbFile,modelFile,"--save",scoreFile)
      #step 3: run inference with computed scores
      invokeMyself(o,"answer",exampleFile,solutionsFile,"--params",scoreFile)
    elif subcommand=="help":
        print 'ProPPR v2: The pronghorn subcommands are:'
        for com in sorted(shortHelpMsgPH.keys()):
            print '  proppr ' + com + shortHelpMsgPH[com]
   	
shortHelpMsg['ph-help']     = ' help on the pronghorn subcommands, which are of the form ph-xxx'
shortHelpMsgPH['ph-db']     = ' INPUT.graph OUTPUT_DB.pkl: convert arity-two ProPPR facts to theano-compatible format'
shortHelpMsgPH['ph-train']  = ' INPUT_Q.examples INPUT_DB.pkl OUTPUT_M.pkl [OUTPUT_P.params] [--model M] --numIters N: train a hybrid ProPPR-Theano model'
shortHelpMsgPH['ph-answer'] = ' INPUT_Q.examples INPUT_DB.pkl INPUT_M.pkl INPUT_P.params [OUTPUT.solutions.txt]: run inference on a learned model.'

def doHelp(o):
   print 'ProPPR v2: commands are:'
   for com in sorted(shortHelpMsg.keys()):
      print '  proppr ' + com + shortHelpMsg[com]
   print 'other tips:'
   print '  (1) For all commands that invoke Java mains, options can be passed in by appending them,'
   print '      e.g. "proppr answer test.examples --prover tr"'
   print '  (2) For all commands that invoke Java mains, appending "--help" explains additional options'
   print '  (3) The environment variable PROPPR_JAVA_ARGS provides arguments to java itself,'
   print '      e.g. "export PROPPR_JAVA_ARGS=-Xmx32g" increases the heap size'
   print '  (4) Any global options precede the command, and the valid ones are:'
   print '      -Cfoo put all output files in directory \'foo\''
   print '      -n dry-run mode: print actions but don\'t perform them'
shortHelpMsg['help'] = ': this help message'

## helpers

def stemExt(fileName,expectedExtension):
   """Find the base file name, given an expected extension.  The first
   arg might or might not contain the extension, so given either
   fileName foo.ext or foo, this return the pair (foo,foo.ext).
   """
   if fileName.endswith(expectedExtension):
      return (fileName[:-len(expectedExtension)],fileName)
   else:
      if os.path.exists(fileName):
         stem = fileName.rfind('.')
         if stem<0: stem = len(fileName)
         return (fileName[:stem],fileName)
      return (fileName,fileName+expectedExtension)

def invokeMyself(o,*args):
   logging.debug( 'invokeMyself %s %s' % (str(o),str(args)) )
   procArgs = ['%s/scripts/proppr' % getRoot()]
   if 'out' in o and o['out']:
      procArgs.append('-C'+o['out'])
   if 'dryRun' in o and o['dryRun']:
      procArgs.append('-n')
   procArgs.extend(args)
   procArgs.extend(getArgvOptions())
   callProcess(o,procArgs)

def invokeMain(o,main,*mainProgArgs):
   """Invoke a main program, supplying options from the settings file
   and/or the command-line options."""
   root = getRoot()
   classPath = '.:%s/conf/:%s/bin:%s/lib/*' % (root,root,root)
   mainClass = 'edu.cmu.ml.proppr.%s' % main
   optArgs = []
   for (key,val) in loadOptionDict(o).items():
      optArgs.append(key)
      optArgs.append(val)
   callProcess(o,['java','-cp',classPath] + getJavaArgs()  + [mainClass] + list(mainProgArgs) + optArgs)

def invokeHelper(o,main,helperOptions,*mainProgArgs):
   """Invoke a python program from scripts/proppr-helpers, supplying
   options from the settings file and/or the command-line options.
   
   helperOptions: list of cli args *not* to pass on to helper.
   """
   root = getRoot()
   helperFile = '%s/scripts/proppr-helpers/%s' % (root,main)
   globalPropprOpts = []
   if o['out']: globalPropprOpts.extend(['--C',o['out']])
   if o['dryRun']: globalPropprOpts.append('--n')
   helperArgs,otherArgs = _splitArgs(helperOptions)
   callProcess(o,['python',helperFile] + globalPropprOpts + list(mainProgArgs) + helperArgs + ['+'] + otherArgs)

def _splitArgs(targetOpts):
   opts = getArgvOptions()
   logging.debug( 'splitting by %s opts %s' % (str(targetOpts),str(opts)) )
   targetArgs = []
   otherArgs = []
   for i in range(0,len(opts),2):
      if opts[i] in targetOpts:
         targetArgs.append(opts[i])
         targetArgs.append(opts[i+1])
      else:
         otherArgs.append(opts[i])
         otherArgs.append(opts[i+1])
   logging.debug( 'targetArgs %s' % str(targetArgs))
   logging.debug( 'otherArgs %s' % str(otherArgs))
   return targetArgs,otherArgs

def callProcess(o,args,**kw):
   """Call a process, tracing the actual call."""
   if kw: logging.info('subprocess call options: '+ str(kw))
   logging.info('calling: ' + ' '.join(args))
   if o['dryRun']: return
   stat = subprocess.call(args,**kw)
   if stat:
      logging.info(('call failed (status %d): ' % stat) + ' '.join(args))
      sys.exit(stat) #propagate failure

def getRoot():
   """Get the root dir for the ProPPR codebase."""
   try:
      return os.environ['PROPPR']
   except IndexError:
      print "you must set the environment variable 'PROPPR' to the root of your source tree"
      sys.exit(-1)

def getJavaArgs():
   """Get any java arguments defined in the environment"""
   jargs = os.environ.get('PROPPR_JAVA_ARGS')
   return jargs.split() if jargs else []

def getOutputDirectory():
   """Get any output directory defined in the environment"""
   out = os.environ.get('PROPPR_OUTPUT')
   if out and not out.endswith("/"):
      out += "/"
   return out or ""

def getFile(name,o,quiet=False):
   """Return the file name, prepending the output directory defined by -C
   if necessary, and if quiet!=True, warning if the file does not
   exist.
   """
   test = name
   if os.path.exists(test): return test
   test = o['out']+name
   if os.path.exists(test): return test
   if quiet:return name
   print "no file %s in current directory" % name,
   if o['out']: print "or %s" % o['out']
   else: print ""

def makeOutput(filename,o):
   """Create an output filename with the requested filename, in the -C directory if requested."""
   if filename.startswith(o['out']): return filename
   return o['out']+filename

def getArg(i,defaultVal=None):
   """Get the i-th command line argument."""
   def safeDefault():
      if defaultVal: 
         return defaultVal
      else:
         logging.warn("expected at least %d command-line arguments - use 'proppr help' for help" % (i+1))
         sys.exit(-1)
   try:
      result = sys.argv[i+1]
      return result if not result.startswith("--") else safeDefault()
   except IndexError:      
      return safeDefault()

def getArgvOptions():
   """Find the command-line arguments starting with the first one that begins with --"""
   for i in range(len(sys.argv)):
      if sys.argv[i].startswith('--'):
         return sys.argv[i:]
   return []

def setArgvOption(n,val):
   for i in range(len(sys.argv)):
      if sys.argv[i].startswith('--'):
         sys.argv[i+n]=val
         return

def loadOptionDict(o):
   """Load options from proppr.settings, ie previously stored with 'proppr set',
   or from the command line."""
   opts = {}
   try:
      for line in open(getFile("proppr.settings",o,quiet=True),'r'):
         key,val = line.strip().split("\t")
         opts[key] = val
   except IOError:
      print 'warning: no options in proppr.settings yet'
   commandLineOpts = getArgvOptions()
   try:
      for i in range(0,len(commandLineOpts),2):
         opts[commandLineOpts[i]] = commandLineOpts[i+1]
   except IndexError:  #missing option value
      opts[commandLineOpts[i]] = '1'
   return opts

def saveOptionDict(opts,o):
   fp = open(o['out']+"proppr.settings",'w')
   for key,val in opts.items():
      fp.write(key + '\t' + val + '\n')
   fp.close()
   print 'saved',len(opts),'option(s) into proppr.settings'

## invoke main

if __name__ == "__main__":
   doMain()
